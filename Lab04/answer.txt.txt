I. Compare the top-level containers in Swing and AWT
- AWT :
    - Frame: AWT provides the Frame class as its main top-level container.
    They can contain menus, buttons, text fields, etc., and are typically used as the main entry point for AWT-based applications.
    - Window: AWT also offers the Window class, which is a top-level container similar to Frame. 
    Window does not include the title bar, border, or menu bar.
    
- Swing:
  -JFrame: A replacement for AWT's Frame, providing additional features and a consistent look-and-feel across platforms.
-JDialog: Similar to AWT's Dialog but with more functionality and better integration with the Swing component architecture.
-JApplet: Replaces AWT's Applet, providing a richer feature set.
-JWindow: Similar to JFrame but without the decorations like title bar and borders.

II. Compare the class name of components in AWT and the corresponding classâ€™s name in Swing

Name of component in Swing is  "J" + AWT name, except:
- Choice:
    - AWT: Choice
    - Swing: JComboBox

III. Compare the event-handling of Swing and AWT applications
- AWT:
    - Delegation Model: AWT follows a delegation event model, where event handling is done by delegation. 
    Components in AWT have corresponding listener interfaces

    - Anonymous Inner Classes: Event listeners in AWT are commonly implemented using anonymous inner classes, 
    which can make the code more compact but may result in less readability and maintainability, especially for
    larger applications.

    - Single Event Dispatch Thread: AWT applications typically use a single event dispatch thread (EDT) to handle
    all UI events

- Swing:
    - Listener Model: Swing also follows the listener event model similar to AWT, where event listeners
    are registered with components to handle specific types of events. Swing provides a rich set of listener
    interfaces for various types of events (e.g., ActionListener, MouseListener, KeyListener).

    - Anonymous Inner Classes: Like AWT, Swing applications often use anonymous inner classes to implement event
    listeners, but Swing also supports other approaches such as separate listener classes or lambda expressions 
    introduced in Java 8, which can improve code readability and maintainability.

    - Concurrency: Swing introduces additional concurrency considerations compared to AWT. Swing applications must
    ensure that UI updates and event handling tasks are performed on the event dispatch thread (EDT) to prevent UI 
    responsiveness issues. 
    
    - Custom Events: Swing allows the creation of custom events and event listeners, which can be useful for implementing
    application-specific event handling logic.

    - Pluggable Look and Feel: Swing's pluggable look and feel architecture allows developers to customize the appearance 
    and behavior of their applications independently of the underlying platform.

    => Swing has more features than AWT